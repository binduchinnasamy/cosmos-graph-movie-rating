'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _highland = require('highland');

var _highland2 = _interopRequireDefault(_highland);

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function defaultExecuteHandler(messageStream, callback) {
  let errored = false;
  let objectMode = false;

  (0, _highland2.default)(messageStream).stopOnError(err => {
    // TODO: this does not seem to halt the stream properly, and make
    // the callback being fired twice. We need to get rid of the ugly
    // errored variable check.
    errored = true;
    callback(err);
  }).map(({ result: { data } }) => {
    objectMode = !_lodash2.default.isArray(data);

    return data;
  }).sequence().toArray(results => {
    if (!errored) {
      callback(null, objectMode ? results[0] : results);
    }
  });
}

exports.default = defaultExecuteHandler;