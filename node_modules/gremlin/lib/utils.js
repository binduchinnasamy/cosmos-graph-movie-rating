'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

exports.buildQueryFromSignature = buildQueryFromSignature;

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Given optional and polymorphic arguments, return an object with a raw
 * 'gremlin' string and optional 'bindings' object.
 * When supplying a query object as first parameter, any bindings supplied
 * as the last parameter will be shallow-merged.
 *
 * @param {String|Object|Function} rawScript
 * @param {Object} rawBindings
 * @return {Object}: { gremlin<String>, bindings<Object> }
 */
function buildQueryFromSignature(rawScript = '', rawBindings) {
  const { gremlin = rawScript, bindings = rawBindings } = rawScript;

  return {
    gremlin,
    // Remap 'undefined' bindings as 'null' values that would otherwise
    // result in missing/unbound variables in the Gremlin script execution
    // context.
    bindings: _lodash2.default.mapValues(_extends({}, bindings, rawBindings), value => _lodash2.default.isUndefined(value) ? null : value)
  };
}