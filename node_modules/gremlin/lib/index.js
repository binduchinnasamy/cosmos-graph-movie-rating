'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.bindForClient = exports.makeTemplateTag = exports.statics = undefined;

var _zer = require('zer');

Object.defineProperty(exports, 'statics', {
  enumerable: true,
  get: function () {
    return _zer.gremlin;
  }
});
exports.createClient = createClient;

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _gremlinTemplateString = require('gremlin-template-string');

var _gremlinTemplateString2 = _interopRequireDefault(_gremlinTemplateString);

var _GremlinClient = require('./GremlinClient');

var _GremlinClient2 = _interopRequireDefault(_GremlinClient);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function createClient(port, host, options) {
  if (typeof port === 'object') {
    options = port;
    port = undefined;
  }

  if (typeof host === 'object') {
    options = host;
    host = undefined;
  }

  return new _GremlinClient2.default(port, host, options);
}

/**
 * Given a query object, returns a Promise of executing that query with a
 * given client.
 * @param  {GremlinClient} client Gremlin client to execute queries with
 * @param  {Object} query  A query Object { gremlin: String, bindings: Object }
 * @return {Promise} Promise of execution of the query
 */
const makePromise = (client, query) => {
  const promise = new Promise((resolve, reject) => client.execute(query, (err, results) => err ? reject(err) : resolve(results)));
  // Let's attach the query for easier debugging
  promise.query = query;

  return promise;
};

const makeTemplateTag = exports.makeTemplateTag = client => (...gremlinChunks) => makePromise(client, (0, _gremlinTemplateString2.default)(...gremlinChunks));

/**
 * Given a map of functions returning query objects, returns a map
 * of function promising execution of these queries with the given Gremlin
 * client.
 *
 * @param  {GremlinClient} client Gremlin client to execute queries with
 * @param  {Object<String, Function<Object>>} functions
 * @return {Object<String, Function<Promise<Results>>>}
 */
const bindForClient = exports.bindForClient = (client, functions) => (0, _lodash2.default)(functions).mapValues(fn => (...args) => makePromise(client, fn(...args))).value();

exports.default = {
  createClient,
  makeTemplateTag,
  bindForClient
};